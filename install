#!/bin/sh
# Set things up

###############
# Configuration
###############

packages_basic="vim:wget:rsync:nnn:lynx:gnupg:markdown:emacs:neomutt:newsboat:isync:imagemagick:ffmpeg:youtube-dl:mpv:sxiv:zsh:scrot:acpi:xmonad:feh:dmenu:zathura:zathura-pdf-mupdf:scrot:calcurse"
packages_extra="$packages_basic:gimp:pandoc:shellcheck:transmission:qemu:guile:poppler"

# The package installation and other os-specific setup
if [ "$(uname)" = "OpenBSD" ] ; then 
	packages_basic="$packages_basic:colorls:hs-xmonad-contrib"
	packages_extra="$packages_extra:texlive_base:inconsolata-font:linuxlibertine-fonts-ttf:noto-emoji"
	pkg_install_cmd="pkg_add"
	rm -f ~/.cshrc  \
		~/.login \
		~/.cvsrc  \
		~/.mailrc  \
		~/.profile  \
		~/.Xdefaults 
elif [ "$(uname)" = "Darwin" ] ; then
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	# TODO: What packages do I want on a mac?
	packages_basic=""
	packages_extra=""
	pkg_install_cmd="brew install"
else 
	pkg_install_cmd=""
fi

###############
##### Functions
###############

# Install the needed packaes
packages () {
	ping -q -c 1 1.1.1.1 >/dev/null || { echo "No internet connection"; exit ; }

	echo "Install [b]asic or [e]xtra packages?"
	read -r
	selection="$REPLY"
	if [ -z "$pkg_install_cmd" ] ; then
		echo "Command to install packages:" 
		read -r
		pkg_install_cmd="$REPLY"
	fi
	[ "$pkg_install_cmd" = "apk add" ] && $packages_basic="$packages_basic:mandoc:man-pages:mandoc-apropos"
	if [ "$selection" = "b" ] || [ "$selection" = "B" ] ; then 
		eval "$pkg_install_cmd $(echo "$packages_basic" | sed "s/:/ /g")"
	elif [ "$selection" = "e" ] || [ "$selection" = "E" ] ; then 
		eval "$pkg_install_cmd $(echo "$packages_extra" | sed "s/:/ /g")"
	fi
}

# Pull from remote
upgrade () {
	ping -q -c 1 1.1.1.1 >/dev/null || { echo "No internet connection"; exit ; }
	git fetch --all
	git reset --hard origin/master
}

# Link files
install () {
	# Create source and destination lists
	find home -type f -name "*" > list.tmp
	awk -v pwd="$PWD" '{print pwd "/" $1}' list.tmp > ./source.tmp
	cut -d '/' -f3- list.tmp | awk -v home="$HOME" '{print home "/" $1}' > ./dest.tmp

	# Iterate over the lines in the destination file
	while IFS="\n" read -r line ; do
		# Get the line number
		num="$(grep -n "$line" ./dest.tmp | cut -d ':' -f1)"

		# Make directories because ln is dumber than stow
		dir=${line%/*}
		mkdir -p "$dir"

		# Make the links
		ln -sf "$(head -"$num" ./source.tmp | tail -1)" "$(head -"$num" ./dest.tmp | tail -1)"
	done < ./dest.tmp

	rm -f ./list.tmp ./source.tmp ./dest.tmp
}

# Remove Links
uninstall () {
	# Create list of files to delete
	find ./home/ -type f -name "*" | cut -d '/' -f4- | awk -v home="$HOME" '{print home "/" $1}' > ./dest.tmp

	# Delete each file
	while IFS="\n" read -r line ; do
		rm -f "$line"
	done < ./dest.tmp

	rm -f ./dest.tmp
}

###############
### Interactive
###############
case "$1" in
	pkg) packages ;;
	dl) upgrade ;;
	ln) install ;;
	un) uninstall ;;
	all) upgrade
		packages
		install 
		;;
	*) echo "Options: 
	pkg	Install required packages.
	dl	Pull changes from remote.
	ln	Create symlinks to repository files.
	un	Remove said symlinks.
	all	Configure a new system."
		;;
esac
